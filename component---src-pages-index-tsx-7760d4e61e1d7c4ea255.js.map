{"version":3,"sources":["webpack:///./src/components/helpers/slogan.tsx","webpack:///./src/pages/index.tsx"],"names":["TextCarousel","Slogan","props","backgrounds","state","backgroundIndex","changeBackground","bind","componentDidMount","this","timeout","setTimeout","animDuration","componentWillUnmount","clearTimeout","setState","length","render","style","className","React","Component","HomePosts","defn","pageQuery","IndexPage","width","data","header","childImageSharp","fluid","sizes","split","height","String","Number","aspectRatio","css","lang","config","title","name","content","description","property","siteUrl","src","facebook","twitter","Wrapper","outer","SiteHeader","backgroundImage","inner","logo","maxHeight","fixed","alt","SiteNav","isHome","id","SiteMain","PostFeed","PostFeedRaise","allMarkdownRemark","edges","map","post","node","frontmatter","draft","PostCard","key","fields","slug","children","Footer"],"mappings":"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","file":"component---src-pages-index-tsx-7760d4e61e1d7c4ea255.js","sourcesContent":["import React from \"react\"\r\nimport { css } from '@emotion/core'\r\nimport Typist from 'react-typist';\r\n\r\nconst TextCarousel = css`\r\n  .goo {\r\n    font-size: 3rem;\r\n    line-height: 1.35;\r\n    display: inline;\r\n    box-decoration-break: clone;\r\n    background: #fff;\r\n    padding: 0.5rem 1rem;\r\n    filter: url('#goo');\r\n  }\r\n\r\n  .goo:focus {\r\n    outline: 0;\r\n  }\r\n`\r\n\r\n// https://jsfiddle.net/69z2wepo/130855/\r\n\r\nclass Slogan extends React.Component {\r\n\tconstructor(props) {\r\n  \tsuper(props)\r\n    // this.backgrounds = [\"https://i.imgur.com/Y0iI6Mxb.jpg\", \"https://i.imgur.com/qWP4aRSb.jpg\", \"https://i.imgur.com/flTzFAib.jpg\"]\r\n        this.backgrounds = [\r\n            \"Rozet ile hayatınıza değer katın\",\r\n            \"Değişim bir adımla başlar\",\r\n            \"Yeteri kadar nedeniniz varsa, yapabilirsiniz!\",\r\n            \"Hedefini belirle hayatını değiştir\"]\r\n    this.state = { backgroundIndex: 0 }\r\n    \r\n    this.changeBackground = this.changeBackground.bind(this)\r\n  }\r\n\r\n  componentDidMount () {\r\n    this.timeout = setTimeout(\r\n      this.changeBackground,\r\n      this.props.animDuration * 1000\r\n    )\r\n  }\r\n  \r\n  componentWillUnmount() {\r\n  \tif (this.timeout) clearTimeout(this.timeout)\r\n  }\r\n\r\n  changeBackground () {\r\n    this.setState(function ({ backgroundIndex }) {\r\n      const nextBackgroundIndex = ++backgroundIndex % this.backgrounds.length\r\n\r\n      return { backgroundIndex: nextBackgroundIndex }\r\n    }, function () {\r\n      this.timeout = setTimeout(\r\n        this.changeBackground,\r\n        this.props.animDuration * 1000\r\n      )\r\n    })\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <div style={{TextCarousel}} className=\"goo\">{this.backgrounds[this.state.backgroundIndex]}</div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Slogan","import { graphql } from 'gatsby';\r\nimport * as React from 'react';\r\nimport Helmet from 'react-helmet';\r\nimport { css, jsx } from '@emotion/core';\r\n\r\nimport Footer from '../components/Footer';\r\nimport SiteNav from '../components/header/SiteNav';\r\nimport Slogan from '../components/helpers/slogan';\r\nimport PostCard from '../components/PostCard';\r\nimport Wrapper from '../components/Wrapper';\r\nimport IndexLayout from '../layouts';\r\nimport {\r\n  inner,\r\n  outer,\r\n  PostFeed,\r\n  PostFeedRaise,\r\n  SiteDescription,\r\n  SiteHeader,\r\n  SiteHeaderContent,\r\n  SiteMain,\r\n  SiteTitle,\r\n} from '../styles/shared';\r\nimport { PageContext } from '../templates/post';\r\nimport config from '../website-config';\r\n\r\nconst HomePosts = css`\r\n  @media (min-width: 795px) {\r\n    .post-card:nth-of-type(6n + 1):not(.no-image) {\r\n      flex: 1 1 100%;\r\n      flex-direction: row;\r\n    }\r\n\r\n    .post-card:nth-of-type(6n + 1):not(.no-image) .post-card-image-link {\r\n      position: relative;\r\n      flex: 1 1 auto;\r\n      border-radius: 5px 0 0 5px;\r\n    }\r\n\r\n    .post-card:nth-of-type(6n + 1):not(.no-image) .post-card-image {\r\n      position: absolute;\r\n      width: 100%;\r\n      height: 100%;\r\n    }\r\n\r\n    .post-card:nth-of-type(6n + 1):not(.no-image) .post-card-content {\r\n      flex: 0 1 357px;\r\n    }\r\n\r\n    .post-card:nth-of-type(6n + 1):not(.no-image) h2 {\r\n      font-size: 2.6rem;\r\n    }\r\n\r\n    .post-card:nth-of-type(6n + 1):not(.no-image) p {\r\n      font-size: 1.8rem;\r\n      line-height: 1.55em;\r\n    }\r\n\r\n    .post-card:nth-of-type(6n + 1):not(.no-image) .post-card-content-link {\r\n      padding: 30px 40px 0;\r\n    }\r\n\r\n    .post-card:nth-of-type(6n + 1):not(.no-image) .post-card-meta {\r\n      padding: 0 40px 30px;\r\n    }\r\n    .productShowcaseSection .logos img {\r\n      max-height: 70px;\r\n      width: 70px;\r\n    }\r\n  }\r\n`;\r\n\r\nconst defn = css`\r\n  @media (max-width: 412px) {\r\n    font-size: 1em;\r\n  }\r\n  margin: 0.5rem 2em 0 2em;\r\n  border-radius: 10px;\r\n  padding: 0 0.5em;\r\n  font-size: 1.5em;\r\n  font-style: italic;\r\n  background: rgba(63, 64, 63, 0.64);\r\n  box-decoration-break: clone;\r\n  .goo:focus {\r\n    outline: 0;\r\n  }\r\n`\r\n\r\nexport interface IndexProps {\r\n  pageContext: {\r\n    currentPage: number;\r\n    numPages: number;\r\n  };\r\n  data: {\r\n    logo: {\r\n      childImageSharp: {\r\n        fixed: any;\r\n      };\r\n    };\r\n    header: {\r\n      childImageSharp: {\r\n        fluid: any;\r\n      };\r\n    };\r\n    allMarkdownRemark: {\r\n      edges: {\r\n        node: PageContext;\r\n      }[];\r\n    };\r\n  };\r\n}\r\n\r\nconst IndexPage: React.FunctionComponent<IndexProps> = props => {\r\n  const width = props.data.header.childImageSharp.fluid.sizes.split(', ')[1].split('px')[0];\r\n  const height = String(Number(width) / props.data.header.childImageSharp.fluid.aspectRatio);\r\n  return (\r\n    <IndexLayout css={HomePosts}>\r\n      <Helmet>\r\n        <html lang={config.lang} />\r\n        <title>{config.title}</title>\r\n        <meta name=\"description\" content={config.description} />\r\n        <meta property=\"og:site_name\" content={config.title} />\r\n        <meta property=\"og:type\" content=\"website\" />\r\n        <meta property=\"og:title\" content={config.title} />\r\n        <meta property=\"og:description\" content={config.description} />\r\n        <meta property=\"og:url\" content={config.siteUrl} />\r\n        <meta\r\n          property=\"og:image\"\r\n          content={`${config.siteUrl}${props.data.header.childImageSharp.fluid.src}`}\r\n        />\r\n        {config.facebook && <meta property=\"article:publisher\" content={config.facebook} />}\r\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\r\n        <meta name=\"twitter:title\" content={config.title} />\r\n        <meta name=\"twitter:description\" content={config.description} />\r\n        <meta name=\"twitter:url\" content={config.siteUrl} />\r\n        <meta\r\n          name=\"twitter:image\"\r\n          content={`${config.siteUrl}${props.data.header.childImageSharp.fluid.src}`}\r\n        />\r\n        {config.twitter && (\r\n          <meta\r\n            name=\"twitter:site\"\r\n            content={`@${config.twitter.split('https://twitter.com/')[1]}`}\r\n          />\r\n        )}\r\n        <meta property=\"og:image:width\" content={width} />\r\n        <meta property=\"og:image:height\" content={height} />\r\n      </Helmet>\r\n      <Wrapper>\r\n        <header\r\n          css={[outer, SiteHeader]}\r\n          style={{\r\n            backgroundImage: `url('${props.data.header.childImageSharp.fluid.src}')`,\r\n          }}\r\n        >\r\n          <div css={inner}>\r\n            <SiteHeaderContent>\r\n              <SiteTitle>\r\n                {props.data.logo ? (\r\n                  <img\r\n                    style={{ maxHeight: '45px' }}\r\n                    src={props.data.logo.childImageSharp.fixed.src}\r\n                    alt={config.title}\r\n                  />\r\n                ) : (\r\n                  config.title\r\n                )}\r\n              </SiteTitle>\r\n              <SiteDescription css={defn}><Slogan animDuration={3} /></SiteDescription>\r\n            </SiteHeaderContent>\r\n            <SiteNav isHome />\r\n          </div>\r\n        </header>\r\n        <main id=\"site-main\" css={[SiteMain, outer]}>\r\n          <div css={inner}>\r\n            <div css={[PostFeed, PostFeedRaise]}>\r\n              {props.data.allMarkdownRemark.edges.map(post => {\r\n                // filter out drafts in production\r\n                return (\r\n                  (post.node.frontmatter.draft !== true ||\r\n                    process.env.NODE_ENV !== 'production') && (\r\n                    <PostCard key={post.node.fields.slug} post={post.node} />\r\n                  )\r\n                );\r\n              })}          \r\n            </div>\r\n          </div>\r\n        </main>\r\n        {props.children}\r\n        <Footer />\r\n      </Wrapper>\r\n    </IndexLayout>\r\n  );\r\n};\r\n\r\nexport default IndexPage;\r\n\r\nexport const pageQuery = graphql`\r\n  query {\r\n    logo: file(relativePath: { eq: \"img/logo.png\" }) {\r\n      childImageSharp {\r\n        # Specify the image processing specifications right in the query.\r\n        # Makes it trivial to update as your page's design changes.\r\n        fixed {\r\n          ...GatsbyImageSharpFixed\r\n        }\r\n      }\r\n    }\r\n    header: file(relativePath: { eq: \"img/stas-kulesh-55191-unsplash.jpg\" }) {\r\n      childImageSharp {\r\n        # Specify the image processing specifications right in the query.\r\n        # Makes it trivial to update as your page's design changes.\r\n        fluid(maxWidth: 2000) {\r\n          ...GatsbyImageSharpFluid\r\n        }\r\n      }\r\n    }\r\n    allMarkdownRemark(\r\n      filter: {\r\n        frontmatter: { type: { in: [\"article\", \"page\"]} }\r\n      },\r\n      limit: 1000, sort: { fields: [frontmatter___date, frontmatter___title], order: [ASC, DESC] }) {\r\n      edges {\r\n        node {\r\n          timeToRead\r\n          frontmatter {\r\n            title\r\n            date\r\n            tags\r\n            draft\r\n            image {\r\n              childImageSharp {\r\n                fluid(maxWidth: 3720) {\r\n                  ...GatsbyImageSharpFluid\r\n                }\r\n              }\r\n            }\r\n            author {\r\n              id\r\n              bio\r\n              avatar {\r\n                children {\r\n                  ... on ImageSharp {\r\n                    fixed(quality: 90) {\r\n                      src\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n          excerpt\r\n          fields {\r\n            layout\r\n            slug\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n"],"sourceRoot":""}